;; Performance
(setq gc-cons-threshold 100000000)
(setq read-process-output-max (* 1024 1024)) ;; 1mb

(add-hook 'after-init-hook #'(lambda ()
                               ;; restore after startup
                               (setq gc-cons-threshold 800000)))

;; Move customization variables to a separate file and load them
;; these are generated by emacs, and are normally dumped here
(setq custom-file (locate-user-emacs-file "custom-vars.el"))
(load custom-file 'noerror 'nomessage)

;; *************************************
;; **            PLUGINS              ** 
;; *************************************

;; Using Straight.el as a package manager
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 6))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))


;; -------- AUTO COMPLETION ----------

;; ** VERTICO
(straight-use-package 'vertico) ; enhanced suggestions in minibuffer
(vertico-mode)
(setq minibuffer-prompt-properties
      '(read-only t cursor-intangible t face minibuffer-prompt))
(add-hook 'minibuffer-setup-hook #'cursor-intangible-mode) ; no cursor in mb

;; ** MARGINALIA
(straight-use-package 'marginalia) ; describes cmds in mb
(marginalia-mode)

;; ** IN-LINE AUTOCOMPLETION
(straight-use-package 'corfu)
(setq corfu-cycle t
      corfu-auto t
      corfu-separator ?\s
      corfu-auto-prefux 2
      corfu-auto-delay 0.0
      corfu-echo-documentation 0.25)
(global-corfu-mode)

;; ** ORDERLESS
(straight-use-package 'orderless) ; more flexible fuzzy finding
(setq completion-styles '(orderless basic)
      completion-category-overrides '((file (styles basic partial-completion))))

;; ** KEYBIND SUGGESTIONS
(straight-use-package 'which-key)
(which-key-mode)
(setq which-key-idle-delay 0.3)


;; ---------- GIT INTEGRATION ------------

;; ** MAGIT
(straight-use-package 'magit)
; (magit-display-buffer-function
; #'magit-display-buffer-same-window-except-diff-v1)
(straight-use-package 'evil-magit)

;; ** GIT GUTTERS
(straight-use-package 'git-gutter)
(global-git-gutter-mode)
(setq git-gutter:update-interval 0.1)
(custom-set-variables
 '(git-gutter:modified-sign " ") ;; two space
 '(git-gutter:added-sign " ")    ;; multiple character is OK
 '(git-gutter:deleted-sign " "))
(set-face-background 'git-gutter:modified "purple") ;; background color
(set-face-foreground 'git-gutter:added "green")
(set-face-foreground 'git-gutter:deleted "red")
;; Persist history over emacs restart
(straight-use-package 'savehist)
(savehist-mode)


;; ---------- BETTER CODE EDITING -----------

;; ** EVIL
(straight-use-package 'evil)
(setq evil-want-keybinding nil)
(evil-mode)
(evil-set-initial-state 'bs-mode 'emacs)

;; ** EVIL DEFAULTS
(straight-use-package 'evil-collection)
(evil-collection-init)
(straight-use-package 'evil-org) ; IDK, use and see
(add-hook 'org-mode 'evil-org-mode)
(require 'evil-org-agenda)
(evil-org-agenda-set-keys)

;; ** PROJECT FINDING
(straight-use-package 'projectile) ; Project file browsing
(projectile-mode)
(define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)

;; ** BETTER SYNTAX PARSING
(straight-use-package 'tree-sitter)
(straight-use-package 'tree-sitter-langs)
;; Try to enable treesitter everywhere
(global-tree-sitter-mode)
(add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode)

;; ** INDENT GUIDES
(straight-use-package 'highlight-indent-guides)
(add-hook 'prog-mode-hook 'highlight-indent-guides-mode)
(setq highlight-indent-guides-method 'character)

;; ** RAINBOW DELIMITERS
(straight-use-package 'rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; ** COLOUR CODES ARE COLOURFUL
(straight-use-package 'rainbow-mode)


;; *************************************
;; **           KEYBINDS              ** 
;; *************************************

;; ** Leader key to backslash
(evil-set-leader 'normal "\\") ; leader keys for normal and visual
(evil-set-leader 'visual "\\")

;; ** Projectile
(evil-define-key 'normal
  'global (kbd "<leader>f") 'projectile-command-map)

;; ** Commenting
(evil-define-key 'normal 'global (kbd "<leader>cc") 'comment-line)
(evil-define-key 'normal 'global (kbd "<leader>cu") 'comment-line)
(evil-define-key 'visual 'global (kbd "<leader>cc") 'comment-line)
(evil-define-key 'visual 'global (kbd "<leader>cu") 'comment-line)
;; (evil-define-key 'normal 'global (kbd "C->") 'indent-rigidly-right-to-tab-stop)
;; (evil-define-key 'normal 'global (kbd "C-<") 'indent-rigidly-left-to-tab-stop)


;; *************************************
;; **         VISUAL STYLE            ** 
;; *************************************

;; ** THEME
(load-theme 'modus-operandi) 
(set-frame-font "Roboto Mono:size=13")

;; https://www.gnu.org/software/emacs/manual/html_node/elisp/Layout-Parameters.html
(setq default-frame-alist
      (append (list
	           '(min-height . 1)             ; minimum character height
               '(height     . 45)            ; default height
	           '(min-width  . 1)             ; minimum character width
               '(width      . 81)            ; default width
               '(vertical-scroll-bars . nil)
               '(internal-border-width . 15) ; gives nice border
               '(border-color . "red")
               '(left-fringe    . 1)         ; fringe 
               '(right-fringe   . 1))))

;; ** TABS
(global-tab-line-mode)


;; *************************************
;; **         EMACS DEFAULTS          ** 
;; *************************************

;; ---------- USER EXPERIENCE -----------
(setq inhibit-startup-screen t            ; No startup screen
      inhibit-startup-message t           ; No startup message
      inhibit-startup-echo-area-message t ; No startup message
      initial-scratch-message t           ; No scratch message
      frame-title-format t                ; Have frame title
      use-file-dialog nil                 ; No file dialog
      use-dialog-box nil                  ; No dialog box
      pop-up-windows nil                  ; No pop-up windows
      indicate-empty-lines nil            ; No empty line indicators
      cursor-in-non-selected-windows nil  ; No cursor in inactive windows
      font-lock-maximum-decoration nil    ; Moderate font lock
      font-lock-maximum-size nil          ; No limit on font lock
      auto-fill-mode nil                  ; No line break space points
      fill-column 80                      ; fill col to 80
      confirm-nonexistent-file-or-buffer nil ; No confirm nonexistent buffer
      completion-styles '(basic substring); Completion style
      org-return-follows-link t           ; RET in org mode link opens it
      )
(fset 'yes-or-no-p 'y-or-n-p) ; y/n instead of yes/no for questions

;; ** VISUAL CHANGES to EDITOR
(menu-bar-mode t)   ; Menu bar toggle
(tool-bar-mode -1)  ; Tool bar toggle (has to be -1 vs nil)
(global-display-line-numbers-mode t) ; Display line numbers
(global-hl-line-mode t)              ; highlight the line you are on
(blink-cursor-mode nil)              ; do you want a blinking cursor?
(set-scroll-bar-mode nil)            ; kill scrollbar
(temp-buffer-resize-mode)            ; Size of temporary buffers
(setq temp-buffer-max-height 8)
(setq window-min-height 1)           ; Minimum window height

;; ** TERMINAL MODE
;; Default shell in term
(unless
    (or (eq system-type 'windows-nt)
        (not (file-exists-p "/bin/zsh")))
  (setq-default shell-file-name "/bin/zsh")
  (setq explicit-shell-file-name "/bin/zsh"))

;; ;; Kill term buffer when exiting
(defadvice term-sentinel (around my-advice-term-sentinel (proc msg))
  (if (memq (process-status proc) '(signal exit))
      (let ((buffer (process-buffer proc)))
        ad-do-it
        (kill-buffer buffer))
    ad-do-it))
(ad-activate 'term-sentinel) 

;; ---------- HISTORY ------------

;; Save what you enter into minibuffer prompts
(setq history-length 25)
(savehist-mode t)
(recentf-mode t)            ; Show recent files you edited
(save-place-mode t)         ; save location of cursor in buffer
(global-auto-revert-mode t) ; buffer react to file changes


;; ---------- TEXT EDITING -----------

;; TABS
(setq-default indent-tabs-mode nil; Tabs evil
			  tab-width 4)        ; Set spaces to 4
(setq-default indent-line-function 'insert-tab)

;; Make sure clipboard works properly in tty mode on OSX
(defun copy-from-osx ()
  (shell-command-to-string "pbpaste"))
(defun paste-to-osx (text &optional push)
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))
(when (and (not (display-graphic-p))
           (eq system-type 'darwin))
    (setq interprogram-cut-function 'paste-to-osx)
    (setq interprogram-paste-function 'copy-from-osx))

;; ---------- ORG MODE -----------
(setq org-latex-packages-alist '(("" "fullpage") ("avoid-all" "widows-and-orphans") ("" "svg"))) ; Latex smaller margins
(setq org-list-allow-alphabetical t)

